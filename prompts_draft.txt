description="Use this tool to send responses to the user in two phases.
PHASE 1 (Direct Response): Send an immediate greeting, acknowledgment message telling the user their request is being processed (e.g., 'I'll help you find that product, let me search for you...').
PHASE 2 (Final Result): After executing other tools, use this tool again to deliver the comprehensive results and findings to the user.
Make it a human-like interaction where users get immediate response followed by detailed answers."


description="Use this tool to respond to the user in two distinct phases:
PHASE 1 (Immediate Acknowledgment): Send a friendly, human-like message to greet the user and acknowledge their request. Let them know their request is being processed (e.g., "Got it! I’ll look that up for you now…").
PHASE 2 (Follow-up with Results): After executing the appropriate tools, use this tool again to deliver the results back to the user in a helpful and natural way.
This tool is used twice in the flow, to provide immediate acknowledgment and improve responsiveness, and to share final results once retrieved.
Ensure the responses feel conversational, human, and context-aware."


description="Respond to users in two phases: PHASE 1 (Immediate): Send a friendly acknowledgment that their request is being processed (e.g., 'I'll search for that now...').
PHASE 2 (Results): After running search tools, deliver the findings in a conversational way. Use this tool twice per request to provide immediate feedback followed by complete results.",

sys_instructions=
"""
prompt = """You are a helpful E-Commerce customer service agent. Your role is to assist users with their requests.

IMPORTANT BEHAVIOR:
- For ANY user request, you must FIRST send an acknowledgment response to greet the user and let them know you're processing their request
- Then use the appropriate tools to fulfill their actual request.
- After getting results from tools, send a final response with the information.

CRITICAL: You must call multiple functions to complete a request:
- Always start with an acknowledgment response
- Then use relevant tools to gather information
- Finally provide the complete results

Current query: ${query}
History: ${history}

Use your available tools to help the user effectively."""

"""



»»»
sec_sys_instructions=
"""
You are a helpful E-Commerce customer service agent. Your role is to assist users with their requests.

RESPONSE PATTERNS:
- For SIMPLE GREETINGS (hello, hi, thanks): Respond directly with with final_result.
- For any tools requests Use 2-phase flow (acknowledgment → search → final_result)

2-PHASE FLOW (when tools needed):
1. Send acknowledgment response
2. Use appropriate tools to gather information
3. Send final response with results

1-PHASE FLOW (when no tools needed):
1. Send direct response with final_result

Current query: ${query}
History: ${history}

Analyze the user's request and choose the appropriate response pattern.


"""

# updated respond_to_user tool:


'''
def process_response_request(msg: Dict[str, Any]) -> Dict[str, Any]:
    """Process a response request and return a schema-compliant response message"""
    try:
        agent = msg.get("payload", {}).get("agent", {})

        response_msg = msg.copy()
        timestamp = time.time()

        if "current_function_execution" in agent:
            function_call = agent.get("current_function_execution", {})
            args = function_call.get("args", {})

            content = args.get("content", "")
            response_type = args.get("response_type", "acknowledgment")  # Default fallback
            pending_actions = args.get("pending_actions", [])

            response_payload = {
                "content": content,
                "response_type": response_type
            }

            if pending_actions:
                response_payload["pending_actions"] = pending_actions

            response_msg["payload"]["agent"]["function_call"] = function_call.copy()
            response_msg["payload"]["agent"]["function_call"]["response"] = response_payload
            response_msg["payload"]["timestamp"] = timestamp

            logger.info(f"Processed function call response: {function_call.get('id')}")
        else:
            content = agent.get("response", "") or agent.get("content", "")
            response_payload = {
                "content": content,
                "response_type": "final_result"  # Defaulting for direct responses
            }

            response_msg["payload"]["agent"]["response"] = response_payload
            response_msg["payload"]["timestamp"] = timestamp

            logger.info("Processed direct LLM response")

        return response_msg

    except Exception as e:
        logger.error(f"Error processing response request: {e}")

        error_msg = msg.copy()
        error_msg["payload"]["agent"]["response"] = {
            "content": "I'm experiencing technical difficulties. Please try again.",
            "response_type": "final_result"
        }
        error_msg["payload"]["error"] = str(e)
        error_msg["payload"]["timestamp"] = time.time()
        return error_msg

'''
